// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["interactiveTransactions"]
}

// --------------------------------------

model User {
  id             Int      @id @default(autoincrement())
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  name           String?
  email          String   @unique
  hashedPassword String?
  role           String   @default("USER")

  tokens   Token[]
  sessions Session[]
}

model Session {
  id                 Int       @id @default(autoincrement())
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
  expiresAt          DateTime?
  handle             String    @unique
  hashedSessionToken String?
  antiCSRFToken      String?
  publicData         String?
  privateData        String?

  user   User? @relation(fields: [userId], references: [id])
  userId Int?
}

model Token {
  id          Int      @id @default(autoincrement())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  hashedToken String
  type        String
  // See note below about TokenType enum
  // type        TokenType
  expiresAt   DateTime
  sentTo      String

  user   User @relation(fields: [userId], references: [id])
  userId Int

  @@unique([hashedToken, type])
}

// NOTE: It's highly recommended to use an enum for the token type
//       but enums only work in Postgres.
//       See: https://blitzjs.com/docs/database-overview#switch-to-postgre-sql
// enum TokenType {
//   RESET_PASSWORD
// }

// -----------------------------------------------------

model Candidate {
  globalId               Int
  type                   String // ENUM: student/employee
  firstName              String
  lastName               String
  email                  String?
  status                 String? // electable, rejected, String
  comment                String?
  electabilityVerifiedOn DateTime?
  isElectionHelper       Boolean?
  matriculationNumber    String? // only students
  createdAt              DateTime  @default(now())
  subjectId              Int? // Subject globalId
  explicitelyVoteAtId    Int? // Unit globalId
  worksAtId              Int? // Unit globalId
  version                Version   @relation(fields: [versionId], references: [id])
  versionId              Int

  // REFERENCED BY
  // VotingResult
  // CandidateListPosition
  // StatusGroupMembership

  @@id([globalId, versionId])
}

model Subject {
  globalId    Int
  name        String  @unique
  shortName   String? @unique
  belongsToId Int // Unit globalId
  version     Version @relation(fields: [versionId], references: [id])
  versionId   Int

  // REFERENCED BY
  // Candidate

  @@id([globalId, versionId])
}

model Site {
  globalId    Int
  name        String
  shortName   String?
  description String?
  version     Version @relation(fields: [versionId], references: [id])
  versionId   Int

  // REFERENCED BY
  // PollingStation
  // Unit

  @@id([globalId, versionId])
}

model Constituency {
  globalId           Int
  name               String
  shortName          String?
  description        String?
  presenceVotingAtId Int // PollingStation globalId
  version            Version @relation(fields: [versionId], references: [id])
  versionId          Int

  // REFERENCED BY
  // Unit
  // ConstituencyEligibility

  @@id([globalId, versionId])
}

model Unit {
  globalId         Int
  type             String //ENUM: faculty/department
  name             String
  shortName        String?
  description      String?
  associatedWithId Int // Site globalId
  assignedToId     Int // Constituency globalId
  version          Version @relation(fields: [versionId], references: [id])
  versionId        Int

  // REFERENCED BY
  // Subject
  // Candidate

  @@id([globalId, versionId])
}

model PollingStation {
  globalId    Int
  name        String
  shortName   String?
  locatedAtId Int // Site globalId
  version     Version @relation(fields: [versionId], references: [id])
  versionId   Int

  // REFERENCED BY
  // Constituency

  @@id([globalId, versionId])
}

model StatusGroup {
  globalId  Int
  name      String
  shortName String?
  priority  Int
  version   Version @relation(fields: [versionId], references: [id])
  versionId Int

  // REFERENCED BY
  // StatusGroupMembership
  // StatusGroupEligibility

  @@id([globalId, versionId])
}

model VotingResult {
  globalId      Int
  numberOfVotes Int
  electionId    Int // Election globalId
  candidateId   Int // Candidate globalId
  version       Version @relation(fields: [versionId], references: [id])
  versionId     Int

  @@id([globalId, versionId])
}

model CandidateList {
  globalId        Int
  name            String
  shortName       String?
  order           String // ENUM: alphabetical/numeric
  submittedOn     DateTime
  createdOn       DateTime @default(now())
  candidatesForId Int // Election globalId
  version         Version  @relation(fields: [versionId], references: [id])
  versionId       Int

  // REFERENCED BY
  // CandidateListPosition

  @@id([globalId, versionId])
}

model CandidateListPosition {
  candidateId Int // Candidate globalId
  listId      Int // CandidateList globalId
  position    Int? // 0-indexed Position of candidate on candidate list, may be undefined for alphabetical lists

  @@id([candidateId, listId])
}

model StatusGroupMembership {
  candidateId   Int // Candidate globalId
  statusGroupId Int // StatusGroup globalId
  deleted       Boolean @default(false)
  version       Version @relation(fields: [versionId], references: [id])
  versionId     Int

  @@id([candidateId, statusGroupId, versionId])
}

model StatusGroupEligibility {
  statusGroupId Int // StatusGroup globalId
  electionId    Int // Election globalId
  deleted       Boolean @default(false)
  version       Version @relation(fields: [versionId], references: [id])
  versionId     Int

  @@id([electionId, statusGroupId, versionId])
}

model ConstituencyEligibility {
  constituencyId Int // Constituency globalId
  electionId     Int // Election globalId
  deleted        Boolean @default(false)
  version        Version @relation(fields: [versionId], references: [id])
  versionId      Int

  @@id([electionId, constituencyId, versionId])
}

model Election {
  globalId      Int
  numberOfSeats Int
  committeeId   Int // Committee globalId
  runsAtId      Int // ElectionSet globalId
  version       Version @relation(fields: [versionId], references: [id])
  versionId     Int

  // REFERENCED BY
  // CandidateList
  // StatusGroupEligibility
  // ConstituencyEligibility

  @@id([globalId, versionId])
}

model Committee {
  globalId  Int
  name      String
  shortName String?
  version   Version @relation(fields: [versionId], references: [id])
  versionId Int

  // REFERENCED BY
  // Election

  @@id([globalId, versionId])
}

model ElectionSet {
  globalId  Int
  name      String
  startDate DateTime
  endDate   DateTime
  version   Version  @relation(fields: [versionId], references: [id])
  versionId Int

  // REFERENCED BY
  // Election

  @@id([globalId, versionId])
}

model Version {
  id                      Int                       @id @default(autoincrement())
  createdAt               DateTime                  @default(now())
  name                    String?
  ElectionSet             ElectionSet[]
  Committee               Committee[]
  Election                Election[]
  CandidateList           CandidateList[]
  VotingResult            VotingResult[]
  Candidate               Candidate[]
  Subject                 Subject[]
  Site                    Site[]
  Constituency            Constituency[]
  Unit                    Unit[]
  PollingStation          PollingStation[]
  StatusGroup             StatusGroup[]
  ConstituencyEligibility ConstituencyEligibility[]
  StatusGroupEligibility  StatusGroupEligibility[]
  StatusGroupMembership   StatusGroupMembership[]
  Upload                  Upload?
}

model Upload {
  id         Int      @id @default(autoincrement())
  filename   String
  uploadedAt DateTime @default(now())
  type       String // ENUM: template, data
  key        String?
  version    Version? @relation(fields: [versionId], references: [id])
  versionId  Int?     @unique
}
